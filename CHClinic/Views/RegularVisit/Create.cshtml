@model CHClinic.Models.Views.RegularVisitData

@{
    ViewBag.Title = "Create";
    //WebGrid grid = new WebGrid(Model.PrescribedMeds, rowsPerPage:10);
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Patient Regular Visit Record</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.PersonId, "PersonId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("PersonId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PersonId, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.VisitDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.VisitDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.VisitDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Problems, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Problems, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Problems, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Revisit, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Revisit)
                    @Html.ValidationMessageFor(model => model.Revisit, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NextVisit, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NextVisit, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NextVisit, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
                @Html.LabelFor(model => model.Billable, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.Billable)
                        @Html.ValidationMessageFor(model => model.Billable, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.VisitBillable, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.VisitBillable)
                        @Html.ValidationMessageFor(model => model.VisitBillable, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.VisitCharge, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.VisitCharge, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.VisitCharge, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group-lg">
            <div class="col-md-offset-2 col-md-10">
                <a href="#" id="addNew" class="btn-primary">Add Medicine</a>
            </div>
        </div>
        <table id="dataTable" border="0" cellpadding="0" cellspacing="0">
            <tr>

                <th>
                    <div class="form-group-sm">
                        @Html.LabelFor(model => model.PrescribedMeds.FirstOrDefault().MedicineName, htmlAttributes: new { @class = "control-label col-md-2" })
                    </div>
                </th>
                <th>
                    <div class="form-group-sm">
                        @Html.LabelFor(model => model.PrescribedMeds.FirstOrDefault().Power, htmlAttributes: new { @class = "control-label col-md-2" })
                    </div>
                </th>
                <th>
                    <div class="form-group-sm">
                        @Html.LabelFor(model => model.PrescribedMeds.FirstOrDefault().NoOfTime, htmlAttributes: new { @class = "control-label col-md-2" })
                    </div>
                </th>
                <th>
                    <div class="form-group-sm">
                        @Html.LabelFor(model => model.PrescribedMeds.FirstOrDefault().Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
                    </div>
                </th>
                <th>
                    <div class="form-group-sm">
                        @Html.LabelFor(model => model.PrescribedMeds.FirstOrDefault().Remarks, htmlAttributes: new { @class = "control-label col-md-2" })
                    </div>
                </th>
                <th></th>
            </tr>

            @if (Model.PrescribedMeds != null && Model.PrescribedMeds.Count > 0)
            {
                int j = 0;
                foreach (var i in Model.PrescribedMeds)
                {
                    <tr>
                        <td>
                            <div class="col-md-12">
                                @Html.EditorFor(a => a.PrescribedMeds[j].MedicineName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(a => a.PrescribedMeds[j].MedicineName, "", new { @class = "text-danger" })
                            </div>
                        </td>

                        <td>
                            <div class="col-md-8">
                                @Html.EditorFor(a => a.PrescribedMeds[j].Power, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(a => a.PrescribedMeds[j].Power, "", new { @class = "text-danger" })
                            </div>
                        </td>
                        <td>
                            <div class="col-md-8">
                                @Html.EditorFor(a => a.PrescribedMeds[j].NoOfTime, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(a => a.PrescribedMeds[j].NoOfTime, "", new { @class = "text-danger" })
                            </div>
                        </td>
                        <td>
                            <div class="col-md-8">
                                @Html.EditorFor(a => a.PrescribedMeds[j].Quantity, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(a => a.PrescribedMeds[j].Quantity, "", new { @class = "text-danger" })
                            </div>
                        </td>
                        <td>
                            <div class="col-md-8">
                                @Html.EditorFor(a => a.PrescribedMeds[j].Remarks, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(a => a.PrescribedMeds[j].Remarks, "", new { @class = "text-danger" })
                            </div>
                        </td>
                        @*<td>@Html.TextBoxFor(a => a.PrescribedMeds[j].MedicineName)</td>
                            <td>@Html.TextBoxFor(a => a.PrescribedMeds[j].Power)</td>
                            <td>@Html.TextBoxFor(a => a.PrescribedMeds[j].NoOfTime)</td>
                            <td>@Html.TextBoxFor(a => a.PrescribedMeds[j].Quantity)</td>*@
                        <td>
                            @if (j > 0)
                            {
                                <a href="#" class="remove">Remove me</a>
                            }
                        </td>
                    </tr>
                    j++;
                }
            }

        </table>


        <br class="progress-bar-danger" />






        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script language="javascript">
        $(document).ready(function () {

            //1. Add new row
            $("#addNew").click(function (e) {
                e.preventDefault();
                var $tableBody = $("#dataTable");
                var $trLast = $tableBody.find("tr:last");
                var $trNew = $trLast.clone();

                var suffix = $trNew.find(':input:first').attr('name').match(/\d+/);
                $trNew.find("td:last").html('<a href="#" class="remove">Remove</a>');
                $.each($trNew.find(':input'), function (i, val) {
                    // Replaced Name
                    var oldN = $(this).attr('name');
                    var newN = oldN.replace('[' + suffix + ']', '[' + (parseInt(suffix) + 1) + ']');
                    $(this).attr('name', newN);
                    //Replaced value
                    var type = $(this).attr('type');
                    if (type.toLowerCase() == "text") {
                        $(this).attr('value', '');
                    }

                    // If you have another Type then replace with default value
                    $(this).removeClass("input-validation-error");

                });
                $trLast.after($trNew);

                // Re-assign Validation
                var form = $("form")
                    .removeData("validator")
                    .removeData("unobtrusiveValidation");
                $.validator.unobtrusive.parse(form);
            });

            // 2. Remove
            $(document).on("click", "a.remove", function (e) {
                e.preventDefault();
                $(this).parent().parent().remove();
            });

        });
    </script>
}
